// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int         @id @default(autoincrement())
  email               String?     @unique
  name                String?
  phone               String      @unique
  isActivated         Boolean     @default(false)
  paymentExpiredDate  DateTime    @default(now())
  company             Company?    @relation(fields: [companyId], references: [id])
  companyId           Int?
  items               Item[]
  codes               Code[]
  orders              Order[]
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model Code {
  id              Int         @id @default(autoincrement())
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  value           Int
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Category {
  id              Int         @id @default(autoincrement())
  title           String
  description     String      @default("")
  parentId        Int         @default(0)
  sort            Int         @default(1)
  items           Item[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Company {
  id              Int               @id @default(autoincrement())
  type            RegistrationForm  @default(IP)
  name            String
  description     String            @default("")
  users           User[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Item {
  id              Int         @id @default(autoincrement())
  title           String
  description     String      @default("")
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  images          String[]
  price           Int
  category        Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId      Int
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}


model Order {
  id              String            @id @default(uuid())
  status          OrderStatus       @default(CREATED)
  amount          Int
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  reason          String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

enum OrderStatus {
  CREATED
  SUCCESS
  CANCELED
}

enum RegistrationForm {
  IP
  OOO
  ZAO
  OAO
}
